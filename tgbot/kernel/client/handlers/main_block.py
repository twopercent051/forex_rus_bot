from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram import F, Router
from aiogram.fsm.context import FSMContext
from sqlalchemy.exc import IntegrityError

from create_bot import config, bot
from tgbot.kernel.client.inline import InlineKeyboard
from tgbot.misc.states import ClientFSM
from tgbot.misc.workers import Workers
from tgbot.models.redis_connector import RedisConnector
from tgbot.models.sql_connector import ClientsDAO
from tgbot.services.garantex import GarantexAPI

router = Router()

inline = InlineKeyboard()

admin_ids = config.tg_bot.admin_ids


@router.message(Command('test'))
async def test(message: Message):
    user_id = '1234'
    username = 'skfjvndf'
    user = await ClientsDAO.create_ret(user_id=user_id, username=username)
    print(user)

@router.message(Command("become_worker"))
async def become_worker(message: Message):
    if message.from_user.username:
        workers = await RedisConnector.get_role_redis()
        if str(message.from_user.id) in workers:
            text = "–í—ã —É–∂–µ —è–≤–ª—è–µ—Ç–µ—Å—å —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–º ü§∑"
            await Workers.create_worker(worker_id=message.from_user.id, worker_username=message.from_user.username)
        else:
            admin_text = f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{message.from_user.username} –ø–æ–¥–∞–ª –∑–∞—è–≤–∫—É, —á—Ç–æ–±—ã —Å—Ç–∞—Ç—å —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–º"
            kb = inline.become_worker_kb(user_id=message.from_user.id, username=message.from_user.username)
            text = "–ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –û–∂–∏–¥–∞–π—Ç–µ —Ä–µ—à–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
            for admin in admin_ids:
                await bot.send_message(chat_id=admin, text=admin_text, reply_markup=kb)
    else:
        text = "–í–∞–º –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å username –≤ –¢–µ–ª–µ–≥—Ä–∞–º —á—Ç–æ–±—ã —Å—Ç–∞—Ç—å —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–º. –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –∑–∞–ø—Ä–æ—Å"
    await message.delete()
    await message.answer(text=text)


async def main_menu_render(user_id: int | str, start: bool):
    if start:
        text = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ ForexRub. –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –±—ã—Å—Ç—Ä–æ –æ–±–º–µ–Ω—è—Ç—å USDT –≤ —Ä—É–±–ª—å –ø–µ—Ä–µ–≤–æ–¥–æ–º –Ω–∞ –∫–∞—Ä—Ç—É " \
               "–°–±–µ—Ä–±–∞–Ω–∫–∞ –∏–ª–∏ –¢–∏–Ω—å–∫–æ—Ñ—Ñ. –ü—Ä–æ—Å—Ç–æ —Å–æ–∑–¥–∞–π—Ç–µ –∑–∞—è–≤–∫—É. –ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –∫–∞–∫–∏–µ-–ª–∏–±–æ –≤–æ–ø—Ä–æ—Å—ã —Å–º–µ–ª–æ –ø–∏—à–∏—Ç–µ " \
               "–≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É, –æ—Ç–≤–µ—Ç–∏–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è"
    else:
        text = "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
    kb = InlineKeyboard.main_menu_kb()
    await bot.send_message(chat_id=user_id, text=text, reply_markup=kb)


@router.message(Command("start"))
async def main_menu(message: Message, state: FSMContext):
    username = f"@{message.from_user.username}" if message.from_user.username else "---"
    try:
        await ClientsDAO.create(user_id=str(message.from_user.id), username=username)
    except IntegrityError:
        pass
    await state.set_state(ClientFSM.home)
    await main_menu_render(user_id=message.from_user.id, start=True)


@router.callback_query(F.data == "home")
async def main_menu(callback: CallbackQuery, state: FSMContext):
    await main_menu_render(user_id=callback.from_user.id, start=False)
    await state.set_state(ClientFSM.home)




